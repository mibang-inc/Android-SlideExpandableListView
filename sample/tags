	Session.vim	/^cmap  <Home>$/;"	m
	Session.vim	/^cmap  <Left>$/;"	m
	Session.vim	/^cnoremap  <Del>$/;"	m
	Session.vim	/^cmap  <End>$/;"	m
	Session.vim	/^cmap  <Right>$/;"	m
	Session.vim	/^cnoremap  <BS>$/;"	m
		Session.vim	/^inoremap <silent> 	 =TriggerSnippet()$/;"	m
	Session.vim	/^map   \/$/;"	m
	Session.vim	/^cnoremap  $/;"	m
	Session.vim	/^vmap  <Plug>MoveBlockUp$/;"	m
	Session.vim	/^noremap  :TagbarToggle$/;"	m
	Session.vim	/^cmap  <Down>$/;"	m
	Session.vim	/^imap  <Plug>SuperTabForward$/;"	m
	Session.vim	/^nnoremap <silent>  :call multiple_cursors#new("n")$/;"	m
	Session.vim	/^cmap  <Up>$/;"	m
	Session.vim	/^imap  <Plug>SuperTabBackward$/;"	m
	Session.vim	/^nnoremap <silent>  :CtrlP$/;"	m
		Session.vim	/^inoremap <silent> 	 =ShowAvailableSnips()$/;"	m
	Session.vim	/^map  :WMToggle$/;"	m
,	Session.vim	/^imap , <Plug>(EmmetExpandAbbr)$/;"	m
,	Session.vim	/^nmap , <Plug>(EmmetExpandAbbr)$/;"	m
,	Session.vim	/^vmap , <Plug>(EmmetExpandAbbr)$/;"	m
/	Session.vim	/^imap \/ <Plug>(EmmetToggleComment)$/;"	m
/	Session.vim	/^nmap \/ <Plug>(EmmetToggleComment)$/;"	m
;	Session.vim	/^imap ; <Plug>(EmmetExpandWord)$/;"	m
;	Session.vim	/^nmap ; <Plug>(EmmetExpandWord)$/;"	m
A	Session.vim	/^imap A <Plug>(EmmetAnchorizeSummary)$/;"	m
A	Session.vim	/^nmap A <Plug>(EmmetAnchorizeSummary)$/;"	m
D	Session.vim	/^imap D <Plug>(EmmetBalanceTagOutward)$/;"	m
D	Session.vim	/^nmap D <Plug>(EmmetBalanceTagOutward)$/;"	m
D	Session.vim	/^vmap D <Plug>(EmmetBalanceTagOutward)$/;"	m
N	Session.vim	/^imap N <Plug>(EmmetMovePrev)$/;"	m
N	Session.vim	/^nmap N <Plug>(EmmetMovePrev)$/;"	m
a	Session.vim	/^imap a <Plug>(EmmetAnchorizeURL)$/;"	m
a	Session.vim	/^nmap a <Plug>(EmmetAnchorizeURL)$/;"	m
c	Session.vim	/^vmap c <Plug>(EmmetCodePretty)$/;"	m
d	Session.vim	/^imap d <Plug>(EmmetBalanceTagInward)$/;"	m
d	Session.vim	/^nmap d <Plug>(EmmetBalanceTagInward)$/;"	m
d	Session.vim	/^vmap d <Plug>(EmmetBalanceTagInward)$/;"	m
i	Session.vim	/^imap i <Plug>(EmmetImageSize)$/;"	m
i	Session.vim	/^nmap i <Plug>(EmmetImageSize)$/;"	m
j	Session.vim	/^imap j <Plug>(EmmetSplitJoinTag)$/;"	m
j	Session.vim	/^nmap j <Plug>(EmmetSplitJoinTag)$/;"	m
k	Session.vim	/^imap k <Plug>(EmmetRemoveTag)$/;"	m
k	Session.vim	/^nmap k <Plug>(EmmetRemoveTag)$/;"	m
m	Session.vim	/^vmap m <Plug>(EmmetMergeLines)$/;"	m
n	Session.vim	/^imap n <Plug>(EmmetMoveNext)$/;"	m
n	Session.vim	/^nmap n <Plug>(EmmetMoveNext)$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$<	Session.vim	/^vnoremap $< `>a -->`<i<!-- $/;"	m
$$	Session.vim	/^vnoremap $$ `>a"`<i"$/;"	m
$/	Session.vim	/^vnoremap $\/ `>a*\/`<i\/*$/;"	m
$1	Session.vim	/^vnoremap $1 `>a)`<i($/;"	m
$2	Session.vim	/^vnoremap $2 `>a]`<i[$/;"	m
$3	Session.vim	/^vnoremap $3 `>a}`<i{$/;"	m
$q	Session.vim	/^vnoremap $q `>a'`<i'$/;"	m
$w	Session.vim	/^vnoremap $w `>a"`<i"$/;"	m
,ac	Session.vim	/^map ,ac :!adb_connect && pactive $TARGET$/;"	m
,al	Session.vim	/^map ,al :!adb_connect&&adb logcat$/;"	m
,b	Session.vim	/^nnoremap <silent> ,b :CommandTBuffer$/;"	m
,bc	Session.vim	/^noremap <silent> ,bc :!find . -name *.java > cscope.files && cscope -b -q$/;"	m
,bt	Session.vim	/^map <silent> ,bt :!ctags -R --exclude=\\.* $/;"	m
,c	Session.vim	/^nmap ,c  <Plug>NERDCommenterToggle$/;"	m
,c$	Session.vim	/^nmap ,c$ <Plug>NERDCommenterToEOL$/;"	m
,cA	Session.vim	/^nmap ,cA <Plug>NERDCommenterAppend$/;"	m
,cD	Session.vim	/^nmap <silent> ,cD <Plug>VCSDelete$/;"	m
,cG	Session.vim	/^nmap <silent> ,cG <Plug>VCSClearAndGotoOriginal$/;"	m
,cL	Session.vim	/^nmap <silent> ,cL <Plug>VCSLock$/;"	m
,cN	Session.vim	/^nmap <silent> ,cN <Plug>VCSSplitAnnotate$/;"	m
,cU	Session.vim	/^nmap <silent> ,cU <Plug>VCSUnlock$/;"	m
,ca	Session.vim	/^nmap ,ca <Plug>NERDCommenterAltDelims$/;"	m
,caL	Session.vim	/^nmap ,caL <Plug>CalendarH$/;"	m
,cal	Session.vim	/^nmap ,cal <Plug>CalendarV$/;"	m
,cb	Session.vim	/^nmap ,cb <Plug>NERDCommenterAlignBoth$/;"	m
,cc	Session.vim	/^nmap ,cc <Plug>NERDCommenterComment$/;"	m
,cd	Session.vim	/^noremap ,cd :call CdToProjectRoot()$/;"	m
,cg	Session.vim	/^nmap <silent> ,cg <Plug>VCSGotoOriginal$/;"	m
,ci	Session.vim	/^nmap ,ci <Plug>NERDCommenterInvert$/;"	m
,cl	Session.vim	/^nmap ,cl <Plug>NERDCommenterAlignLeft$/;"	m
,cm	Session.vim	/^nmap ,cm <Plug>NERDCommenterMinimal$/;"	m
,cn	Session.vim	/^nmap ,cn <Plug>NERDCommenterNested$/;"	m
,cp	Session.vim	/^vnoremap ,cp :call CopySelectionLines()$/;"	m
,cq	Session.vim	/^nmap <silent> ,cq <Plug>VCSRevert$/;"	m
,cr	Session.vim	/^nmap <silent> ,cr <Plug>VCSReview$/;"	m
,cs	Session.vim	/^nmap ,cs <Plug>NERDCommenterSexy$/;"	m
,cu	Session.vim	/^nmap ,cu <Plug>NERDCommenterUncomment$/;"	m
,cv	Session.vim	/^nmap <silent> ,cv <Plug>VCSVimDiff$/;"	m
,cy	Session.vim	/^nmap ,cy <Plug>NERDCommenterYank$/;"	m
,di	Session.vim	/^noremap ,di :call DebugInnerClass()$/;"	m
,do	Session.vim	/^noremap ,do :call DebugOuterClass()$/;"	m
,es	Session.vim	/^nmap ,es :call EditSnippet()$/;"	m
,et	Session.vim	/^nmap ,et :exec "e ~\/.vim\/ftplugin\/".&filetype.".vim"$/;"	m
,fU	Session.vim	/^nnoremap ,fU :execute 'CtrlPFunky ' . expand('<cword>')$/;"	m
,fb	Session.vim	/^noremap ,fb viB:g!#^.*\/\/#Tabularize \/,$/;"	m
,fm	Session.vim	/^noremap ,fm :call OpenMakeFileSelector()$/;"	m
,fu	Session.vim	/^nnoremap ,fu :CtrlPFunky$/;"	m
,ig	Session.vim	/^nmap <silent> ,ig <Plug>IndentGuidesToggle$/;"	m
,m	Session.vim	/^noremap ,m :make$/;"	m
,p	Session.vim	/^vnoremap ,p :call EchoSelectionLines()$/;"	m
,pl	Session.vim	/^noremap ,pl :call PushLarge()$/;"	m
,pt	Session.vim	/^map ,pt :set invpaste$/;"	m
,py	Session.vim	/^noremap ,py :call PushYlzhao()$/;"	m
,rr	Session.vim	/^nmap ,rr :call ReloadSnippets(snippets_dir, &filetype)$/;"	m
,s?	Session.vim	/^map ,s? z=$/;"	m
,sa	Session.vim	/^map ,sa zg$/;"	m
,scd	Session.vim	/^nmap ,scd <Plug>SQLUGetColumnDef$/;"	m
,scdt	Session.vim	/^nmap ,scdt <Plug>SQLUGetColumnDataType$/;"	m
,scl	Session.vim	/^nmap ,scl <Plug>SQLUCreateColumnList$/;"	m
,scp	Session.vim	/^nmap ,scp <Plug>SQLUCreateProcedure$/;"	m
,sf	Session.vim	/^nmap ,sf <Plug>SQLUFormatter$/;"	m
,sf	Session.vim	/^vmap ,sf <Plug>SQLUFormatter$/;"	m
,sfr	Session.vim	/^nmap ,sfr <Plug>SQLUFormatStmts$/;"	m
,sfr	Session.vim	/^vmap ,sfr <Plug>SQLUFormatStmts$/;"	m
,sfs	Session.vim	/^nmap ,sfs <Plug>SQLUFormatter$/;"	m
,sfs	Session.vim	/^vmap ,sfs <Plug>SQLUFormatter$/;"	m
,sn	Session.vim	/^map ,sn ]$/;"	m
,sp	Session.vim	/^map ,sp [$/;"	m
,t	Session.vim	/^nnoremap <silent> ,t :CommandT$/;"	m
,tc	Session.vim	/^noremap ,tc :!adb_connect$/;"	m
,tcd	Session.vim	/^noremap ,tcd :call ClearDb()$/;"	m
,tr	Session.vim	/^noremap ,tr :!adb shell stop; sleep 2; adb shell start$/;"	m
,ts	Session.vim	/^noremap ,ts :!target_sync$/;"	m
,u	Session.vim	/^noremap ,u hgUiwe$/;"	m
,va	Session.vim	/^nnoremap ,va :e ~\/.config\/awesome\/rc.lua$/;"	m
,vac	Session.vim	/^nnoremap ,vac :!make clean$/;"	m
,vcg	Session.vim	/^noremap ,vcg :e =language_dir$/;"	m
,vcs	Session.vim	/^noremap ,vcs :e res\/values-zh-rCN\/strings.xml$/;"	m
,vd	Session.vim	/^nnoremap ,vd :!mvn android:deploy$/;"	m
,veg	Session.vim	/^noremap ,veg :e =language_dir$/;"	m
,ves	Session.vim	/^noremap ,ves :e res\/values\/strings.xml$/;"	m
,vf	Session.vim	/^nnoremap ,vf :let @f=expand("%:t:r")$/;"	m
,vh	Session.vim	/^nnoremap ,vh gg\/class$/;"	m
,vjs	Session.vim	/^map ,vjs :sp ~\/.vim\/snippets\/java.snippets$/;"	m
,vl	Session.vim	/^noremap ,vl :cla$/;"	m
,vn	Session.vim	/^nnoremap ,vn :call EditSnippet()$/;"	m
,vp	Session.vim	/^noremap ,vp :let @p=expand("%:p")$/;"	m
,vr	Session.vim	/^nnoremap ,vr :make runa$/;"	m
,vs	Session.vim	/^map ,vs :so ~\/.vimrc$/;"	m
,vt	Session.vim	/^nnoremap ,vt :call EditFileType()$/;"	m
,vu	Session.vim	/^nnoremap ,vu :!ant uninstall$/;"	m
,vv	Session.vim	/^map ,vv :e ~\/.vimrc$/;"	m
,vxs	Session.vim	/^map ,vxs :sp ~\/.vim\/snippets\/xml.snippets$/;"	m
,w	Session.vim	/^nmap ,w :w!$/;"	m
,wc	Session.vim	/^map ,wc :call SwitchToProject("CONTACTS")$/;"	m
,wf	Session.vim	/^map ,wf :call SwitchToProject("FRA")$/;"	m
,wh	Session.vim	/^map ,wh :call SwitchToProject("CALL_HISTORY")$/;"	m
,wp	Session.vim	/^map ,wp :call SwitchToProject("PROVIDER")$/;"	m
,wr	Session.vim	/^map ,wr :call SwitchToProject("RES")$/;"	m
,x	Session.vim	/^nmap ,x :xa!$/;"	m
,y	Session.vim	/^map ,y :YRShow$/;"	m
,z	Session.vim	/^map ,z <Plug>ZoomWin$/;"	m
0	Session.vim	/^map 0 ^$/;"	m
<C-Tab>	Session.vim	/^inoremap <C-Tab> 	$/;"	m
<F9>	Session.vim	/^map <F9> ggVGg?$/;"	m
<NL>	Session.vim	/^vmap <NL> <Plug>MoveBlockDown$/;"	m
<Plug>(EmmetAnchorizeSummary)	Session.vim	/^inoremap <Plug>(EmmetAnchorizeSummary) =emmet#anchorizeURL(1)$/;"	m
<Plug>(EmmetAnchorizeSummary)	Session.vim	/^nnoremap <Plug>(EmmetAnchorizeSummary) :call emmet#anchorizeURL(1)$/;"	m
<Plug>(EmmetAnchorizeURL)	Session.vim	/^inoremap <Plug>(EmmetAnchorizeURL) =emmet#anchorizeURL(0)$/;"	m
<Plug>(EmmetAnchorizeURL)	Session.vim	/^nnoremap <Plug>(EmmetAnchorizeURL) :call emmet#anchorizeURL(0)$/;"	m
<Plug>(EmmetBalanceTagInward)	Session.vim	/^inoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(1)$/;"	m
<Plug>(EmmetBalanceTagInward)	Session.vim	/^nnoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(1)$/;"	m
<Plug>(EmmetBalanceTagInward)	Session.vim	/^vnoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(2)$/;"	m
<Plug>(EmmetBalanceTagOutward)	Session.vim	/^inoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-1)$/;"	m
<Plug>(EmmetBalanceTagOutward)	Session.vim	/^nnoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-1)$/;"	m
<Plug>(EmmetBalanceTagOutward)	Session.vim	/^vnoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-2)$/;"	m
<Plug>(EmmetCodePretty)	Session.vim	/^vnoremap <Plug>(EmmetCodePretty) :call emmet#codePretty()$/;"	m
<Plug>(EmmetExpandAbbr)	Session.vim	/^inoremap <Plug>(EmmetExpandAbbr) =emmet#expandAbbr(0,"")$/;"	m
<Plug>(EmmetExpandAbbr)	Session.vim	/^nnoremap <Plug>(EmmetExpandAbbr) :call emmet#expandAbbr(3,"")$/;"	m
<Plug>(EmmetExpandAbbr)	Session.vim	/^vnoremap <Plug>(EmmetExpandAbbr) :call emmet#expandAbbr(2,"")$/;"	m
<Plug>(EmmetExpandWord)	Session.vim	/^inoremap <Plug>(EmmetExpandWord) =emmet#expandAbbr(1,"")$/;"	m
<Plug>(EmmetExpandWord)	Session.vim	/^nnoremap <Plug>(EmmetExpandWord) :call emmet#expandAbbr(1,"")$/;"	m
<Plug>(EmmetImageSize)	Session.vim	/^inoremap <Plug>(EmmetImageSize) =emmet#imageSize()$/;"	m
<Plug>(EmmetImageSize)	Session.vim	/^nnoremap <Plug>(EmmetImageSize) :call emmet#imageSize()$/;"	m
<Plug>(EmmetMergeLines)	Session.vim	/^vnoremap <Plug>(EmmetMergeLines) :call emmet#mergeLines()$/;"	m
<Plug>(EmmetMoveNext)	Session.vim	/^inoremap <Plug>(EmmetMoveNext) :call emmet#moveNextPrev(0)$/;"	m
<Plug>(EmmetMoveNext)	Session.vim	/^nnoremap <Plug>(EmmetMoveNext) :call emmet#moveNextPrev(0)$/;"	m
<Plug>(EmmetMovePrev)	Session.vim	/^inoremap <Plug>(EmmetMovePrev) :call emmet#moveNextPrev(1)$/;"	m
<Plug>(EmmetMovePrev)	Session.vim	/^nnoremap <Plug>(EmmetMovePrev) :call emmet#moveNextPrev(1)$/;"	m
<Plug>(EmmetRemoveTag)	Session.vim	/^inoremap <Plug>(EmmetRemoveTag) =emmet#removeTag()$/;"	m
<Plug>(EmmetRemoveTag)	Session.vim	/^nnoremap <Plug>(EmmetRemoveTag) :call emmet#removeTag()$/;"	m
<Plug>(EmmetSplitJoinTag)	Session.vim	/^inoremap <Plug>(EmmetSplitJoinTag) :call emmet#splitJoinTag()$/;"	m
<Plug>(EmmetSplitJoinTag)	Session.vim	/^nnoremap <Plug>(EmmetSplitJoinTag) :call emmet#splitJoinTag()$/;"	m
<Plug>(EmmetToggleComment)	Session.vim	/^inoremap <Plug>(EmmetToggleComment) =emmet#toggleComment()$/;"	m
<Plug>(EmmetToggleComment)	Session.vim	/^nnoremap <Plug>(EmmetToggleComment) :call emmet#toggleComment()$/;"	m
<Plug>CVSEdit	Session.vim	/^nnoremap <silent> <Plug>CVSEdit :CVSEdit$/;"	m
<Plug>CVSEditors	Session.vim	/^nnoremap <silent> <Plug>CVSEditors :CVSEditors$/;"	m
<Plug>CVSUnedit	Session.vim	/^nnoremap <silent> <Plug>CVSUnedit :CVSUnedit$/;"	m
<Plug>CVSWatchAdd	Session.vim	/^nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add$/;"	m
<Plug>CVSWatchOff	Session.vim	/^nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off$/;"	m
<Plug>CVSWatchOn	Session.vim	/^nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on$/;"	m
<Plug>CVSWatchRemove	Session.vim	/^nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove$/;"	m
<Plug>CVSWatchers	Session.vim	/^nnoremap <silent> <Plug>CVSWatchers :CVSWatchers$/;"	m
<Plug>CalendarH	Session.vim	/^nnoremap <silent> <Plug>CalendarH :cal Calendar(1)$/;"	m
<Plug>CalendarV	Session.vim	/^nnoremap <silent> <Plug>CalendarV :cal Calendar(0)$/;"	m
<Plug>NERDCommenterAlignBoth	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")$/;"	m
<Plug>NERDCommenterAlignLeft	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")$/;"	m
<Plug>NERDCommenterAppend	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")$/;"	m
<Plug>NERDCommenterComment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")$/;"	m
<Plug>NERDCommenterInsert	Session.vim	/^inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")$/;"	m
<Plug>NERDCommenterInvert	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")$/;"	m
<Plug>NERDCommenterMinimal	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")$/;"	m
<Plug>NERDCommenterNested	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")$/;"	m
<Plug>NERDCommenterSexy	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")$/;"	m
<Plug>NERDCommenterToEOL	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")$/;"	m
<Plug>NERDCommenterToggle	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")$/;"	m
<Plug>NERDCommenterUncomment	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")$/;"	m
<Plug>NERDCommenterYank	Session.vim	/^nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
<Plug>VCSAdd	Session.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd$/;"	m
<Plug>VCSAnnotate	Session.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate$/;"	m
<Plug>VCSClearAndGotoOriginal	Session.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!$/;"	m
<Plug>VCSCommit	Session.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit$/;"	m
<Plug>VCSDelete	Session.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete$/;"	m
<Plug>VCSDiff	Session.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff$/;"	m
<Plug>VCSGotoOriginal	Session.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal$/;"	m
<Plug>VCSInfo	Session.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo$/;"	m
<Plug>VCSLock	Session.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock$/;"	m
<Plug>VCSLog	Session.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog$/;"	m
<Plug>VCSRevert	Session.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert$/;"	m
<Plug>VCSReview	Session.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview$/;"	m
<Plug>VCSSplitAnnotate	Session.vim	/^nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!$/;"	m
<Plug>VCSStatus	Session.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus$/;"	m
<Plug>VCSUnlock	Session.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock$/;"	m
<Plug>VCSUpdate	Session.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate$/;"	m
<Plug>VCSVimDiff	Session.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff$/;"	m
<S-Tab>	Session.vim	/^inoremap <silent> <S-Tab> =BackwardsSnippet()$/;"	m
ExampleActivity	src/com/tjerkw/slideexpandable/sample/ExampleActivity.java	/^public class ExampleActivity extends Activity {$/;"	c
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
[%	Session.vim	/^vmap [% [%m'gv``$/;"	m
]%	Session.vim	/^vmap ]% ]%m'gv``$/;"	m
a%	Session.vim	/^vmap a% [%v]%$/;"	m
aC	Session.vim	/^onoremap <silent> aC :call TextObjWordBasedColumn("aW")$/;"	m
ac	Session.vim	/^onoremap <silent> ac :call TextObjWordBasedColumn("aw")$/;"	m
buildDummyData	src/com/tjerkw/slideexpandable/sample/ExampleActivity.java	/^	public ListAdapter buildDummyData() {$/;"	m	class:ExampleActivity
com.tjerkw.slideexpandable.sample	src/com/tjerkw/slideexpandable/sample/ExampleActivity.java	/^package com.tjerkw.slideexpandable.sample;$/;"	p
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
iC	Session.vim	/^onoremap <silent> iC :call TextObjWordBasedColumn("iW")$/;"	m
ic	Session.vim	/^onoremap <silent> ic :call TextObjWordBasedColumn("iw")$/;"	m
onCreate	src/com/tjerkw/slideexpandable/sample/ExampleActivity.java	/^	public void onCreate(Bundle savedData) {$/;"	m	class:ExampleActivity
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
â	Session.vim	/^cmap â <S-Left>$/;"	m
ä	Session.vim	/^cnoremap ä <S-Right>$/;"	m
æ	Session.vim	/^cmap æ <S-Right>$/;"	m
è	Session.vim	/^cnoremap è $/;"	m
ê	Session.vim	/^nmap ê <Plug>MoveLineDown$/;"	m
ê	Session.vim	/^vmap ê :m'>+$/;"	m
ë	Session.vim	/^nmap ë <Plug>MoveLineDown$/;"	m
ë	Session.vim	/^vmap ë :m'<-2$/;"	m
